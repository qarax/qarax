# coding: utf-8

"""
    Qarax API

    The API for Qarax manager  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Host(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'host_user': 'str',
        'id': 'str',
        'name': 'str',
        'password': 'str',
        'port': 'int',
        'status': 'str'
    }

    attribute_map = {
        'address': 'address',
        'host_user': 'host_user',
        'id': 'id',
        'name': 'name',
        'password': 'password',
        'port': 'port',
        'status': 'status'
    }

    def __init__(self, address=None, host_user=None, id=None, name=None, password=None, port=None, status=None):  # noqa: E501
        """Host - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._host_user = None
        self._id = None
        self._name = None
        self._password = None
        self._port = None
        self._status = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if host_user is not None:
            self.host_user = host_user
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if status is not None:
            self.status = status

    @property
    def address(self):
        """Gets the address of this Host.  # noqa: E501


        :return: The address of this Host.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Host.


        :param address: The address of this Host.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def host_user(self):
        """Gets the host_user of this Host.  # noqa: E501


        :return: The host_user of this Host.  # noqa: E501
        :rtype: str
        """
        return self._host_user

    @host_user.setter
    def host_user(self, host_user):
        """Sets the host_user of this Host.


        :param host_user: The host_user of this Host.  # noqa: E501
        :type: str
        """

        self._host_user = host_user

    @property
    def id(self):
        """Gets the id of this Host.  # noqa: E501


        :return: The id of this Host.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Host.


        :param id: The id of this Host.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Host.  # noqa: E501


        :return: The name of this Host.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Host.


        :param name: The name of this Host.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this Host.  # noqa: E501


        :return: The password of this Host.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Host.


        :param password: The password of this Host.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this Host.  # noqa: E501


        :return: The port of this Host.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Host.


        :param port: The port of this Host.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def status(self):
        """Gets the status of this Host.  # noqa: E501


        :return: The status of this Host.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Host.


        :param status: The status of this Host.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Host, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
