# coding: utf-8

"""
    Qarax API

    The API for Qarax manager  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Vm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'host_id': 'str',
        'id': 'str',
        'kernel': 'str',
        'kernel_params': 'str',
        'memory': 'int',
        'name': 'str',
        'network_mode': 'str',
        'status': 'int',
        'vcpu': 'int'
    }

    attribute_map = {
        'address': 'address',
        'host_id': 'host_id',
        'id': 'id',
        'kernel': 'kernel',
        'kernel_params': 'kernel_params',
        'memory': 'memory',
        'name': 'name',
        'network_mode': 'network_mode',
        'status': 'status',
        'vcpu': 'vcpu'
    }

    def __init__(self, address=None, host_id=None, id=None, kernel=None, kernel_params=None, memory=None, name=None, network_mode=None, status=None, vcpu=None):  # noqa: E501
        """Vm - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._host_id = None
        self._id = None
        self._kernel = None
        self._kernel_params = None
        self._memory = None
        self._name = None
        self._network_mode = None
        self._status = None
        self._vcpu = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if host_id is not None:
            self.host_id = host_id
        if id is not None:
            self.id = id
        if kernel is not None:
            self.kernel = kernel
        if kernel_params is not None:
            self.kernel_params = kernel_params
        if memory is not None:
            self.memory = memory
        if name is not None:
            self.name = name
        if network_mode is not None:
            self.network_mode = network_mode
        if status is not None:
            self.status = status
        if vcpu is not None:
            self.vcpu = vcpu

    @property
    def address(self):
        """Gets the address of this Vm.  # noqa: E501


        :return: The address of this Vm.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Vm.


        :param address: The address of this Vm.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def host_id(self):
        """Gets the host_id of this Vm.  # noqa: E501


        :return: The host_id of this Vm.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this Vm.


        :param host_id: The host_id of this Vm.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def id(self):
        """Gets the id of this Vm.  # noqa: E501


        :return: The id of this Vm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Vm.


        :param id: The id of this Vm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kernel(self):
        """Gets the kernel of this Vm.  # noqa: E501


        :return: The kernel of this Vm.  # noqa: E501
        :rtype: str
        """
        return self._kernel

    @kernel.setter
    def kernel(self, kernel):
        """Sets the kernel of this Vm.


        :param kernel: The kernel of this Vm.  # noqa: E501
        :type: str
        """

        self._kernel = kernel

    @property
    def kernel_params(self):
        """Gets the kernel_params of this Vm.  # noqa: E501


        :return: The kernel_params of this Vm.  # noqa: E501
        :rtype: str
        """
        return self._kernel_params

    @kernel_params.setter
    def kernel_params(self, kernel_params):
        """Sets the kernel_params of this Vm.


        :param kernel_params: The kernel_params of this Vm.  # noqa: E501
        :type: str
        """

        self._kernel_params = kernel_params

    @property
    def memory(self):
        """Gets the memory of this Vm.  # noqa: E501


        :return: The memory of this Vm.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Vm.


        :param memory: The memory of this Vm.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def name(self):
        """Gets the name of this Vm.  # noqa: E501


        :return: The name of this Vm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Vm.


        :param name: The name of this Vm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_mode(self):
        """Gets the network_mode of this Vm.  # noqa: E501


        :return: The network_mode of this Vm.  # noqa: E501
        :rtype: str
        """
        return self._network_mode

    @network_mode.setter
    def network_mode(self, network_mode):
        """Sets the network_mode of this Vm.


        :param network_mode: The network_mode of this Vm.  # noqa: E501
        :type: str
        """

        self._network_mode = network_mode

    @property
    def status(self):
        """Gets the status of this Vm.  # noqa: E501


        :return: The status of this Vm.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Vm.


        :param status: The status of this Vm.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def vcpu(self):
        """Gets the vcpu of this Vm.  # noqa: E501


        :return: The vcpu of this Vm.  # noqa: E501
        :rtype: int
        """
        return self._vcpu

    @vcpu.setter
    def vcpu(self, vcpu):
        """Sets the vcpu of this Vm.


        :param vcpu: The vcpu of this Vm.  # noqa: E501
        :type: int
        """

        self._vcpu = vcpu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
